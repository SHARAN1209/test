package com.bakerhughes.ruleapp.mapper;

import static org.junit.jupiter.api.Assertions.*;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.bakerhughes.ruleapp.dto.LookUpTableResponse;
import com.bakerhughes.ruleapp.dto.RuleAppTableVersionResponse;
import com.bakerhughes.ruleapp.entity.LookUpTableEntity;
import com.bakerhughes.ruleapp.entity.RuleAppTableVersionEntity;

class RuleAppServiceMapperTest {

    private RuleAppServiceMapper mapper;

    @BeforeEach
    void setUp() {
        mapper = new RuleAppServiceMapper();
    }

    @Test
    void testMapTableInformationsToResponse_withValidEntities() {
        LookUpTableEntity entity = new LookUpTableEntity();
        entity.setTableName("TestTable");
        entity.setDownloadableByGroups(Arrays.asList("group1", "group2"));
        entity.setUploadableByGroups(Arrays.asList("group3"));
        entity.setLookupDescription("desc");
        entity.setLookupCategories(Arrays.asList("cat1", "cat2"));
        entity.setNotes("some notes");

        List<LookUpTableResponse> responses = mapper.mapTableInformationsToResponse(Arrays.asList(entity));

        assertNotNull(responses);
        assertEquals(1, responses.size());

        LookUpTableResponse response = responses.get(0);
        assertEquals("TestTable", response.getTableId());
        assertEquals(Arrays.asList("group1", "group2"), response.getDownloadableByGroups());
        assertEquals(Arrays.asList("group3"), response.getUploadableByGroups());
        assertEquals("desc", response.getLookupDescription());
        assertEquals(Arrays.asList("cat1", "cat2"), response.getLookupCategories());
        assertEquals("some notes", response.getNotes());
    }

    @Test
    void testMapTableInformationsToResponse_withEmptyList() {
        List<LookUpTableResponse> responses = mapper.mapTableInformationsToResponse(Collections.emptyList());
        assertNotNull(responses);
        assertTrue(responses.isEmpty());
    }

    @Test
    void testMapTableVersionsToResponse_withValidEntities() {
        RuleAppTableVersionEntity entity = new RuleAppTableVersionEntity();
        entity.setTableId("Table1");
        entity.setVersion(1);
        entity.setSubVersion(2);
        entity.setValidityStart(LocalDateTime.of(2024, 1, 1, 0, 0));
        entity.setValidityEnd(LocalDateTime.of(2025, 1, 1, 0, 0));

        List<RuleAppTableVersionResponse> responses = mapper.mapTableVersionsToResponse(Arrays.asList(entity));

        assertNotNull(responses);
        assertEquals(1, responses.size());

        RuleAppTableVersionResponse response = responses.get(0);
        assertEquals("Table1", response.getTableId());
        assertEquals(1, response.getVersion());
        assertEquals(2, response.getSubVersion());
        assertEquals(LocalDateTime.of(2024, 1, 1, 0, 0), response.getValidityStart());
        assertEquals(LocalDateTime.of(2025, 1, 1, 0, 0), response.getValidityEnd());
    }

    @Test
    void testMapTableVersionsToResponse_withEmptyList() {
        List<RuleAppTableVersionResponse> responses = mapper.mapTableVersionsToResponse(Collections.emptyList());
        assertNotNull(responses);
        assertTrue(responses.isEmpty());
    }
}
