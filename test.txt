package com.bakerhughes.ruleapp.controller;

import com.bakerhughes.ruleapp.dto.LookUpTableResponse;
import com.bakerhughes.ruleapp.dto.RuleAppTableVersionResponse;
import com.bakerhughes.ruleapp.service.ExcelUploadService;
import com.bakerhughes.ruleapp.service.RuleappDAO;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class RuleappControllerTest {

    @Mock
    private RuleappDAO ruleappDAO;

    @Mock
    private ExcelUploadService excelUploadService;

    @Mock
    private MultipartFile multipartFile;

    @InjectMocks
    private RuleappController ruleappController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetLookUpTablesByGroups() {
        List<String> groups = Arrays.asList("group1", "group2");
        List<LookUpTableResponse> mockResponse = new ArrayList<>();
        mockResponse.add(new LookUpTableResponse());

        when(ruleappDAO.getTablesByGroups(groups)).thenReturn(mockResponse);

        ResponseEntity<List<LookUpTableResponse>> response = ruleappController.getLookUpTablesByGroups(groups);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockResponse, response.getBody());
        verify(ruleappDAO, times(1)).getTablesByGroups(groups);
    }

    @Test
    void testGetVersions() {
        String tableId = "123";
        boolean isAdmin = true;
        List<String> groups = Arrays.asList("group1");

        List<RuleAppTableVersionResponse> mockResponse = new ArrayList<>();
        mockResponse.add(new RuleAppTableVersionResponse());

        when(ruleappDAO.getVersions(tableId, isAdmin)).thenReturn(mockResponse);

        ResponseEntity<List<RuleAppTableVersionResponse>> response =
                ruleappController.getVersions(tableId, groups, isAdmin);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockResponse, response.getBody());
        verify(ruleappDAO, times(1)).getVersions(tableId, isAdmin);
    }

    @Test
    void testGetItemsByTableAndVersion() throws JsonProcessingException {
        String tableId = "table1";
        String version = "v1";
        List<String> groups = Arrays.asList("group1", "group2");

        List<Map<String, Object>> mockResponse = new ArrayList<>();
        Map<String, Object> item = new HashMap<>();
        item.put("key", "value");
        mockResponse.add(item);

        when(ruleappDAO.getItems(tableId, version, groups)).thenReturn(mockResponse);

        ResponseEntity<List<Map<String, Object>>> response =
                ruleappController.getItemsByTableAndVersion(tableId, version, groups);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockResponse, response.getBody());
        verify(ruleappDAO, times(1)).getItems(tableId, version, groups);
    }

    @Test
    void testUploadExcelFile() {
        String tableId = "table123";
        List<String> groups = Arrays.asList("group1");
        String currentUser = "user1";

        Map<String, Object> mockResult = new HashMap<>();
        mockResult.put("status", "success");

        when(excelUploadService.uploadExcelFile(eq(tableId), eq(groups), eq(multipartFile), eq(currentUser)))
                .thenReturn(mockResult);

        ResponseEntity<Map<String, Object>> response =
                ruleappController.uploadExcelFile(tableId, groups, multipartFile, currentUser);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockResult, response.getBody());
        verify(excelUploadService, times(1)).uploadExcelFile(tableId, groups, multipartFile, currentUser);
    }
}
