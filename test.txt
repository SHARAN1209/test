package com.bakerhughes.ruleapp.service.impl;

import com.bakerhughes.ruleapp.dto.BulkUploadFormColumn;
import com.bakerhughes.ruleapp.exception.ErrorCode;
import com.bakerhughes.ruleapp.exception.RuleAppServiceException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class DynamicTableServiceImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private DynamicTableServiceImpl service;

    private List<BulkUploadFormColumn> bulkUploadFormColumns;

    @BeforeEach
    void setUp() {
        BulkUploadFormColumn col1 = new BulkUploadFormColumn();
        col1.setColumnName("ID");
        BulkUploadFormColumn col2 = new BulkUploadFormColumn();
        col2.setColumnName("NAME");
        bulkUploadFormColumns = List.of(col1, col2);
    }

    @Test
    void testTruncateAndReloadTable_success() {
        // Mock required columns from DB
        when(jdbcTemplate.queryForList(anyString(), eq(String.class), anyString()))
                .thenReturn(List.of("AGE"));

        // Prepare input data
        Map<String, Object> row1 = new HashMap<>();
        row1.put("id", 1);
        row1.put("name", "John");
        row1.put("age", 30);

        Map<String, Object> row2 = new HashMap<>();
        row2.put("id", 2);
        row2.put("name", "Jane");
        row2.put("age", 25);

        List<Map<String, Object>> data = List.of(row1, row2);

        // Mock truncate and batch update
        doNothing().when(jdbcTemplate).execute(anyString());
        when(jdbcTemplate.batchUpdate(anyString(), anyList())).thenReturn(new int[]{1, 1});

        // Call method
        service.truncateAndReloadTable("PersonTable", data, bulkUploadFormColumns);

        // Verify
        verify(jdbcTemplate, times(1)).execute("TRUNCATE TABLE PersonTable");
        verify(jdbcTemplate, times(1)).batchUpdate(contains("INSERT INTO PersonTable"), anyList());
    }

    @Test
    void testTruncateAndReloadTable_exceptionThrown() {
        // Mock required columns
        when(jdbcTemplate.queryForList(anyString(), eq(String.class), anyString()))
                .thenReturn(List.of("AGE"));

        // Mock truncate call to throw exception
        doThrow(new RuntimeException("DB error")).when(jdbcTemplate).execute(anyString());

        List<Map<String, Object>> data = List.of(Map.of("id", 1, "name", "John", "age", 30));

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class, () ->
                service.truncateAndReloadTable("PersonTable", data, bulkUploadFormColumns)
        );

        assertEquals(ErrorCode.TABLE_RELOAD_FAILURE, ex.getErrorCode());
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, ex.getHttpStatus());
    }

    @Test
    void testGetRequiredColumns_invalidTableName() {
        List<String> result = invokeGetRequiredColumns("123Invalid");
        assertTrue(result.isEmpty());
        verify(jdbcTemplate, never()).queryForList(anyString(), eq(String.class), anyString());
    }

    @Test
    void testGetRequiredColumns_dbError() {
        when(jdbcTemplate.queryForList(anyString(), eq(String.class), anyString()))
                .thenThrow(new RuntimeException("DB error"));

        List<String> result = invokeGetRequiredColumns("ValidTable");
        assertTrue(result.isEmpty());
        verify(jdbcTemplate, times(1))
                .queryForList(anyString(), eq(String.class), eq("ValidTable"));
    }

    @Test
    void testGetRequiredColumns_success() {
        when(jdbcTemplate.queryForList(anyString(), eq(String.class), anyString()))
                .thenReturn(List.of("ID", "AGE"));

        List<String> result = invokeGetRequiredColumns("ValidTable");
        assertEquals(List.of("ID", "AGE"), result);
    }

    /**
     * Helper to call private getRequiredColumns via public method indirectly.
     */
    private List<String> invokeGetRequiredColumns(String tableName) {
        // Call public method with empty data so it indirectly calls getRequiredColumns
        try {
            service.truncateAndReloadTable(tableName, new ArrayList<>(), bulkUploadFormColumns);
        } catch (RuleAppServiceException ignored) {
            // ignore exception, we only care about getRequiredColumns invocation
        }
        return service.getRequiredColumns(tableName);
    }
}
