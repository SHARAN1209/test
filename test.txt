package com.bakerhughes.ruleapp.service.impl;

import com.bakerhughes.ruleapp.dto.BulkUploadFormColumn;
import com.bakerhughes.ruleapp.entity.LookUpTableEntity;
import com.bakerhughes.ruleapp.entity.RuleAppTableVersionEntity;
import com.bakerhughes.ruleapp.entity.RuleappHistoricalDataEntity;
import com.bakerhughes.ruleapp.exception.ErrorCode;
import com.bakerhughes.ruleapp.exception.RuleAppServiceException;
import com.bakerhughes.ruleapp.repository.LookUpTableRepository;
import com.bakerhughes.ruleapp.repository.RuleAppTableVersionRepository;
import com.bakerhughes.ruleapp.repository.RuleappHistoricalDataRepository;
import com.bakerhughes.ruleapp.service.DynamicTableService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.http.HttpStatus;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ExcelUploadServiceImplTest {

    @InjectMocks
    private ExcelUploadServiceImpl excelUploadService;

    @Mock
    private LookUpTableRepository lookUpTableRepository;
    @Mock
    private RuleAppTableVersionRepository ruleAppTableVersionRepository;
    @Mock
    private RuleappHistoricalDataRepository ruleappHistoricalDataRepository;
    @Mock
    private DynamicTableService dynamicTableService;
    @Mock
    private ObjectMapper objectMapper;

    private LookUpTableEntity mockTableEntity;
    private MultipartFile validFile;

    @BeforeEach
    void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);

        // Create a valid Excel file with headers and data
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet();
        Row header = sheet.createRow(0);
        header.createCell(0).setCellValue("Name");
        header.createCell(1).setCellValue("Age");

        Row row = sheet.createRow(1);
        row.createCell(0).setCellValue("John");
        row.createCell(1).setCellValue("30");

        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        workbook.write(bos);

        validFile = new MockMultipartFile("file", "test.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", bos.toByteArray());

        workbook.close();

        // Mock Table entity
        mockTableEntity = new LookUpTableEntity();
        mockTableEntity.setTableName("test_table");
        mockTableEntity.setUploadableByGroups("[\"admin\",\"user\"]");
        mockTableEntity.setKeyColumns("Name");
        mockTableEntity.setBulkUploadForm("[{\"excelColumnName\":\"Name\",\"columnName\":\"name\",\"castTo\":\"String\"}," +
                "{\"excelColumnName\":\"Age\",\"columnName\":\"age\",\"castTo\":\"Integer\"}]");
    }

    @Test
    void testUploadExcelFile_Success() throws Exception {
        List<String> userGroups = List.of("admin");

        when(lookUpTableRepository.findByTableName("test_table")).thenReturn(Optional.of(mockTableEntity));
        when(objectMapper.readValue(eq("[\"admin\",\"user\"]"), any(TypeReference.class)))
                .thenReturn(List.of("admin", "user"));
        when(objectMapper.readValue(eq(mockTableEntity.getBulkUploadForm()), any(TypeReference.class)))
                .thenReturn(List.of(
                        new BulkUploadFormColumn("Name", "name", "String", null),
                        new BulkUploadFormColumn("Age", "age", "Integer", null)
                ));

        when(ruleAppTableVersionRepository.save(any())).thenReturn(new RuleAppTableVersionEntity());

        Map<String, Object> result = excelUploadService.uploadExcelFile("test_table", userGroups, validFile, "tester");

        assertEquals("Excel file processed successfully", result.get("message"));
        assertEquals(1, result.get("totalRows"));
        assertTrue(result.containsKey("version"));

        verify(dynamicTableService, times(1))
                .truncateAndReloadTable(eq("test_table"), anyList(), anyList(), eq("tester"));
        verify(ruleappHistoricalDataRepository, times(1)).saveAll(anyList());
    }

    @Test
    void testUploadExcelFile_TableNotFound() {
        when(lookUpTableRepository.findByTableName("invalid")).thenReturn(Optional.empty());

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class, () ->
                excelUploadService.uploadExcelFile("invalid", List.of("admin"), validFile, "tester"));

        assertEquals(ErrorCode.TABLE_NOT_FOUND, ex.getErrorCode());
    }

    @Test
    void testUploadExcelFile_UnauthorizedUser() throws Exception {
        when(lookUpTableRepository.findByTableName("test_table")).thenReturn(Optional.of(mockTableEntity));
        when(objectMapper.readValue(eq("[\"admin\",\"user\"]"), any(TypeReference.class)))
                .thenReturn(List.of("admin", "user"));

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class, () ->
                excelUploadService.uploadExcelFile("test_table", List.of("guest"), validFile, "tester"));

        assertEquals(ErrorCode.UNAUTHORIZED_UPLOAD_ACCESS, ex.getErrorCode());
    }

    @Test
    void testUploadExcelFile_InvalidBulkUploadForm() throws Exception {
        mockTableEntity.setBulkUploadForm(""); // invalid JSON

        when(lookUpTableRepository.findByTableName("test_table")).thenReturn(Optional.of(mockTableEntity));
        when(objectMapper.readValue(eq("[\"admin\",\"user\"]"), any(TypeReference.class)))
                .thenReturn(List.of("admin"));

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class, () ->
                excelUploadService.uploadExcelFile("test_table", List.of("admin"), validFile, "tester"));

        assertEquals(ErrorCode.BULK_FORM_EMPTY, ex.getErrorCode());
    }

    @Test
    void testUploadExcelFile_MissingRequiredColumns() throws Exception {
        // Excel with wrong header
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet();
        Row header = sheet.createRow(0);
        header.createCell(0).setCellValue("WrongHeader");

        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        workbook.write(bos);

        MultipartFile invalidFile = new MockMultipartFile("file", "wrong.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", bos.toByteArray());
        workbook.close();

        when(lookUpTableRepository.findByTableName("test_table")).thenReturn(Optional.of(mockTableEntity));
        when(objectMapper.readValue(eq("[\"admin\",\"user\"]"), any(TypeReference.class)))
                .thenReturn(List.of("admin"));
        when(objectMapper.readValue(eq(mockTableEntity.getBulkUploadForm()), any(TypeReference.class)))
                .thenReturn(List.of(
                        new BulkUploadFormColumn("Name", "name", "String", null),
                        new BulkUploadFormColumn("Age", "age", "Integer", null)
                ));

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class, () ->
                excelUploadService.uploadExcelFile("test_table", List.of("admin"), invalidFile, "tester"));

        assertEquals(ErrorCode.MISSING_REQUIRED_COLUMNS, ex.getErrorCode());
    }

    @Test
    void testUploadExcelFile_DuplicateKeyFound() throws Exception {
        // Create Excel with duplicate Name
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet();
        Row header = sheet.createRow(0);
        header.createCell(0).setCellValue("Name");
        header.createCell(1).setCellValue("Age");

        Row row1 = sheet.createRow(1);
        row1.createCell(0).setCellValue("John");
        row1.createCell(1).setCellValue("30");

        Row row2 = sheet.createRow(2);
        row2.createCell(0).setCellValue("John"); // duplicate key
        row2.createCell(1).setCellValue("40");

        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        workbook.write(bos);
        workbook.close();

        MultipartFile duplicateFile = new MockMultipartFile("file", "dup.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", bos.toByteArray());

        when(lookUpTableRepository.findByTableName("test_table")).thenReturn(Optional.of(mockTableEntity));
        when(objectMapper.readValue(eq("[\"admin\",\"user\"]"), any(TypeReference.class)))
                .thenReturn(List.of("admin"));
        when(objectMapper.readValue(eq(mockTableEntity.getBulkUploadForm()), any(TypeReference.class)))
                .thenReturn(List.of(
                        new BulkUploadFormColumn("Name", "name", "String", null),
                        new BulkUploadFormColumn("Age", "age", "Integer", null)
                ));

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class, () ->
                excelUploadService.uploadExcelFile("test_table", List.of("admin"), duplicateFile, "tester"));

        assertEquals(ErrorCode.DUPLICATE_KEY_FOUND, ex.getErrorCode());
    }
}
