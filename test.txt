@Service
public class ExcelUploadServiceMS2 {

    @Value("${microservice1.base.url}")
    private String ms1BaseUrl; // e.g. http://localhost:8081

    @Autowired
    private RestTemplate restTemplate;

    public Map<String, Object> uploadExcelFile(String tableId, List<String> groups, MultipartFile file, String currentUser) {
        try {
            // Prepare MultiValueMap for multipart/form-data
            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();

            // Add file (convert to Resource)
            body.add("file", new MultipartInputStreamFileResource(file.getInputStream(), file.getOriginalFilename()));

            // Add groups
            for (String group : groups) {
                body.add("groups", group);
            }

            // Add currentUser
            body.add("currentUser", currentUser);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.MULTIPART_FORM_DATA);

            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

            String url = ms1BaseUrl + "/tables/" + tableId + "/versions";

            ResponseEntity<Map> responseEntity = restTemplate.exchange(
                    url,
                    HttpMethod.POST,
                    requestEntity,
                    Map.class
            );

            return responseEntity.getBody();
        } catch (Exception e) {
            throw new RuntimeException("Error while uploading file to microservice1", e);
        }
    }
}

public class MultipartInputStreamFileResource extends InputStreamResource {
    private final String filename;

    public MultipartInputStreamFileResource(InputStream inputStream, String filename) {
        super(inputStream);
        this.filename = filename;
    }

    @Override
    public String getFilename() {
        return this.filename;
    }

    @Override
    public long contentLength() {
        return -1; // we do not know
    }
}

public <T, R> T connect(String url,
                            HttpMethod method,
                            HttpHeaders headers,
                            R body,
                            Class<T> responseClass) {
        try {
            HttpEntity<R> requestEntity = new HttpEntity<>(body, headers);

            ResponseEntity<T> responseEntity = restTemplate.exchange(
                    url,
                    method,
                    requestEntity,
                    responseClass
            );

            return responseEntity.getBody();
        } catch (Exception e) {
            throw new RuntimeException("Error while calling external service: " + url, e);
        }
    }
