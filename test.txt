package com.bakerhughes.ruleapp.service.impl;

import com.bakerhughes.ruleapp.dto.BulkUploadFormColumn;
import com.bakerhughes.ruleapp.entity.LookUpTableEntity;
import com.bakerhughes.ruleapp.entity.RuleAppTableVersionEntity;
import com.bakerhughes.ruleapp.entity.RuleappHistoricalDataEntity;
import com.bakerhughes.ruleapp.exception.ErrorCode;
import com.bakerhughes.ruleapp.exception.RuleAppServiceException;
import com.bakerhughes.ruleapp.repository.LookUpTableRepository;
import com.bakerhughes.ruleapp.repository.RuleAppTableVersionRepository;
import com.bakerhughes.ruleapp.repository.RuleappHistoricalDataRepository;
import com.bakerhughes.ruleapp.service.DynamicTableService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.mock.web.MockMultipartFile;

import java.io.ByteArrayOutputStream;
import java.time.LocalDateTime;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ExcelUploadServiceImplTest {

    @InjectMocks
    private ExcelUploadServiceImpl excelUploadService;

    @Mock
    private LookUpTableRepository lookUpTableRepository;

    @Mock
    private RuleAppTableVersionRepository ruleAppTableVersionRepository;

    @Mock
    private RuleappHistoricalDataRepository ruleappHistoricalDataRepository;

    @Mock
    private DynamicTableService dynamicTableService;

    @Spy
    private ObjectMapper objectMapper = new ObjectMapper();

    private LookUpTableEntity tableEntity;

    @BeforeEach
    void setUp() {
        tableEntity = new LookUpTableEntity();
        tableEntity.setTableName("test_table");
        tableEntity.setUploadableByGroups("[\"ADMIN\",\"USER\"]");
        tableEntity.setKeyColumns("ID");
        tableEntity.setBulkUploadForm("[{\"excelColumnName\":\"ID\",\"columnName\":\"id\",\"castTo\":\"int\"}]");
    }

    private MockMultipartFile createExcelFile() throws Exception {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet();
        Row header = sheet.createRow(0);
        header.createCell(0).setCellValue("ID");

        Row row = sheet.createRow(1);
        row.createCell(0).setCellValue(123);

        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        workbook.write(bos);
        workbook.close();
        return new MockMultipartFile("file", "test.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", bos.toByteArray());
    }

    @Test
    void testUploadExcelFile_Success() throws Exception {
        MockMultipartFile file = createExcelFile();

        when(lookUpTableRepository.findByTableName("test_table"))
                .thenReturn(Optional.of(tableEntity));
        when(ruleAppTableVersionRepository.findFirstByTableIdAndValidityEndIsNullOrderByValidityStartDesc(any()))
                .thenReturn(Optional.empty());

        Map<String, Object> result = excelUploadService.uploadExcelFile("test_table",
                List.of("ADMIN"), file, "tester");

        assertEquals("Excel file processed successfully", result.get("message"));
        assertEquals(1, result.get("totalRows"));
        assertTrue(result.get("version").toString().contains("."));
        
        // verify historical and dynamic table are called
        verify(dynamicTableService, times(1))
                .truncateAndReloadTable(anyString(), anyList(), anyList(), anyString());
        verify(ruleappHistoricalDataRepository, times(1))
                .save(any(RuleappHistoricalDataEntity.class));
    }

    @Test
    void testUploadExcelFile_TableNotFound() {
        when(lookUpTableRepository.findByTableName("test_table")).thenReturn(Optional.empty());
        MockMultipartFile file = new MockMultipartFile("file", new byte[0]);

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class,
                () -> excelUploadService.uploadExcelFile("test_table", List.of("ADMIN"), file, "tester"));

        assertEquals(ErrorCode.TABLE_NOT_FOUND, ex.getErrorCode());
        assertEquals(HttpStatus.NOT_FOUND, ex.getHttpStatus());
    }

    @Test
    void testUploadExcelFile_Unauthorized() throws Exception {
        tableEntity.setUploadableByGroups("[\"ADMIN\"]");
        when(lookUpTableRepository.findByTableName("test_table")).thenReturn(Optional.of(tableEntity));

        MockMultipartFile file = createExcelFile();

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class,
                () -> excelUploadService.uploadExcelFile("test_table", List.of("GUEST"), file, "tester"));

        assertEquals(ErrorCode.UNAUTHORIZED_UPLOAD_ACCESS, ex.getErrorCode());
        assertEquals(HttpStatus.UNAUTHORIZED, ex.getHttpStatus());
    }

    @Test
    void testUploadExcelFile_MissingColumn() throws Exception {
        tableEntity.setBulkUploadForm("[{\"excelColumnName\":\"Name\",\"columnName\":\"name\",\"castTo\":\"string\"}]");
        when(lookUpTableRepository.findByTableName("test_table")).thenReturn(Optional.of(tableEntity));

        MockMultipartFile file = createExcelFile();

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class,
                () -> excelUploadService.uploadExcelFile("test_table", List.of("ADMIN"), file, "tester"));

        assertEquals(ErrorCode.MISSING_REQUIRED_COLUMNS, ex.getErrorCode());
    }

    @Test
    void testUploadExcelFile_DuplicateKeys() throws Exception {
        MockMultipartFile file = createExcelFile();

        // Add duplicate row to cause duplicate key error
        Workbook workbook = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = workbook.getSheetAt(0);
        Row row = sheet.createRow(2);
        row.createCell(0).setCellValue(123);

        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        workbook.write(bos);
        workbook.close();

        MockMultipartFile duplicateFile = new MockMultipartFile("file", "duplicate.xlsx",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", bos.toByteArray());

        when(lookUpTableRepository.findByTableName("test_table")).thenReturn(Optional.of(tableEntity));

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class,
                () -> excelUploadService.uploadExcelFile("test_table", List.of("ADMIN"), duplicateFile, "tester"));

        assertEquals(ErrorCode.DUPLICATE_KEY_FOUND, ex.getErrorCode());
    }

    @Test
    void testUpdateTableVersion_ExistingVersion() {
        RuleAppTableVersionEntity entity = new RuleAppTableVersionEntity();
        entity.setVersion(1);
        entity.setSubVersion(0);
        entity.setCreatedDate(LocalDateTime.now());

        when(ruleAppTableVersionRepository.findFirstByTableIdAndValidityEndIsNullOrderByValidityStartDesc("test_table"))
                .thenReturn(Optional.of(entity));

        String version = excelUploadService.uploadExcelFile("test_table", List.of("ADMIN"), mock(MockMultipartFile.class), "tester")
                .get("version").toString();

        assertTrue(version.startsWith("1.") || version.startsWith("2."));
    }

    @Test
    void testCastValue_InvalidNumber() {
        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class,
                () -> invokeCastValue("abc", "int"));
        assertEquals(ErrorCode.CASTING_ERROR, ex.getErrorCode());
    }

    // helper to call private castValue through reflection
    private Object invokeCastValue(String value, String castTo) {
        try {
            var method = ExcelUploadServiceImpl.class.getDeclaredMethod("castValue", String.class, String.class);
            method.setAccessible(true);
            return method.invoke(excelUploadService, value, castTo);
        } catch (Exception e) {
            if (e.getCause() instanceof RuleAppServiceException) {
                throw (RuleAppServiceException) e.getCause();
            }
            throw new RuntimeException(e);
        }
    }
}
