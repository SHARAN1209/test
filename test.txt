package com.bakerhughes.ruleapp.service.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.util.*;

import javax.sql.DataSource;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.http.HttpStatus;
import org.springframework.jdbc.core.JdbcTemplate;

import com.bakerhughes.ruleapp.dto.BulkUploadFormColumn;
import com.bakerhughes.ruleapp.exception.ErrorCode;
import com.bakerhughes.ruleapp.exception.RuleAppServiceException;

class DynamicTableServiceImplTest {

    @InjectMocks
    private DynamicTableServiceImpl dynamicTableService;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private DataSource dataSource;

    @Mock
    private Connection connection;

    @Mock
    private DatabaseMetaData metaData;

    @Mock
    private ResultSet tablesRs;

    @Mock
    private ResultSet columnsRs;

    @BeforeEach
    void setup() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(dataSource.getConnection()).thenReturn(connection);
        when(connection.getMetaData()).thenReturn(metaData);
        when(metaData.getIdentifierQuoteString()).thenReturn("\"");
    }

    // ✅ Happy Path
    @Test
    void testTruncateAndReloadTable_Success() throws Exception {
        String tableName = "EMPLOYEE";
        List<BulkUploadFormColumn> columns = List.of(new BulkUploadFormColumn() {{
            setColumnName("ID");
        }});
        List<Map<String, Object>> data = List.of(Map.of("id", 1));

        // Table exists
        when(metaData.getTables(null, null, tableName, new String[]{"TABLE"})).thenReturn(tablesRs);
        when(tablesRs.next()).thenReturn(true);

        // Columns in metadata
        when(metaData.getColumns(null, null, tableName, null))
                .thenReturn(columnsRs)
                .thenReturn(columnsRs); // called twice for nullable + all columns

        when(columnsRs.next()).thenReturn(true, false);
        when(columnsRs.getString("COLUMN_NAME")).thenReturn("ID");
        when(columnsRs.getInt("NULLABLE")).thenReturn(DatabaseMetaData.columnNullable);

        // Run method
        dynamicTableService.truncateAndReloadTable(tableName, data, columns);

        // Verify interactions
        verify(jdbcTemplate).execute("TRUNCATE TABLE \"EMPLOYEE\"");
        verify(jdbcTemplate).batchUpdate(
                startsWith("INSERT INTO \"EMPLOYEE\""),
                anyList()
        );
    }

    // ❌ Invalid table name
    @Test
    void testTruncateAndReloadTable_InvalidTableName() {
        List<Map<String, Object>> data = List.of(Map.of("id", 1));

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class, () ->
                dynamicTableService.truncateAndReloadTable("1INVALID", data, Collections.emptyList())
        );
        assertEquals(HttpStatus.BAD_REQUEST, ex.getStatus());
        assertTrue(ex.getMessage().contains("Invalid table name"));
    }

    // ❌ Table not found
    @Test
    void testTruncateAndReloadTable_TableNotFound() throws Exception {
        when(metaData.getTables(null, null, "EMPLOYEE", new String[]{"TABLE"})).thenReturn(tablesRs);
        when(tablesRs.next()).thenReturn(false);

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class, () ->
                dynamicTableService.truncateAndReloadTable("EMPLOYEE", Collections.emptyList(), Collections.emptyList())
        );

        assertEquals(HttpStatus.BAD_REQUEST, ex.getStatus());
        assertTrue(ex.getMessage().contains("Table not found"));
    }

    // ❌ No valid columns
    @Test
    void testTruncateAndReloadTable_NoValidColumns() throws Exception {
        String tableName = "EMPLOYEE";
        List<Map<String, Object>> data = List.of(Map.of("id", 1));

        when(metaData.getTables(null, null, tableName, new String[]{"TABLE"})).thenReturn(tablesRs);
        when(tablesRs.next()).thenReturn(true);

        // Return empty column metadata
        when(metaData.getColumns(null, null, tableName, null)).thenReturn(columnsRs);
        when(columnsRs.next()).thenReturn(false);

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class, () ->
                dynamicTableService.truncateAndReloadTable(tableName, data, Collections.emptyList())
        );

        assertEquals(HttpStatus.BAD_REQUEST, ex.getStatus());
        assertTrue(ex.getMessage().contains("No valid columns"));
    }

    // ❌ Unexpected SQLException handling
    @Test
    void testTruncateAndReloadTable_SQLExceptionHandled() throws Exception {
        when(dataSource.getConnection()).thenThrow(new RuntimeException("DB down"));

        RuleAppServiceException ex = assertThrows(RuleAppServiceException.class, () ->
                dynamicTableService.truncateAndReloadTable("EMPLOYEE", Collections.emptyList(), Collections.emptyList())
        );

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, ex.getStatus());
        assertTrue(ex.getMessage().contains("Failed to truncateAndReloadTable"));
    }
}
