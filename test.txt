package com.bakerhughes.ruleapp.service.impl;

import com.bakerhughes.ruleapp.dto.BulkUploadFormColumn;
import com.bakerhughes.ruleapp.entity.LookUpTableEntity;
import com.bakerhughes.ruleapp.entity.RuleAppTableVersionEntity;
import com.bakerhughes.ruleapp.exception.RuleAppServiceException;
import com.bakerhughes.ruleapp.repository.LookUpTableRepository;
import com.bakerhughes.ruleapp.repository.RuleAppTableVersionRepository;
import com.bakerhughes.ruleapp.repository.RuleappHistoricalDataRepository;
import com.bakerhughes.ruleapp.service.DynamicTableService;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.time.LocalDateTime;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ExcelUploadServiceImplTest {

    @InjectMocks
    private ExcelUploadServiceImpl service;

    @Mock private LookUpTableRepository lookUpTableRepository;
    @Mock private RuleAppTableVersionRepository ruleAppTableVersionRepository;
    @Mock private RuleappHistoricalDataRepository ruleappHistoricalDataRepository;
    @Mock private DynamicTableService dynamicTableService;
    @Mock private ObjectMapper objectMapper;
    @Mock private MultipartFile file;

    private LookUpTableEntity lookUpTable;

    @BeforeEach
    void setUp() {
        lookUpTable = new LookUpTableEntity();
        lookUpTable.setTableName("demo_table");
        lookUpTable.setUploadableByGroups("[\"groupA\"]");
        lookUpTable.setKeyColumns("id");
        lookUpTable.setRecordType("normal");
    }

    /** Utility: build small Excel file in memory */
    private InputStream makeExcel(Map<String, Object> headers, List<Map<String, Object>> rows) throws IOException {
        Workbook wb = new XSSFWorkbook();
        Sheet sheet = wb.createSheet();
        Row headerRow = sheet.createRow(0);
        int col = 0;
        for (String h : headers.keySet()) headerRow.createCell(col++).setCellValue(h);

        int rowIdx = 1;
        for (Map<String, Object> data : rows) {
            Row row = sheet.createRow(rowIdx++);
            int i = 0;
            for (Object val : data.values()) {
                Cell c = row.createCell(i++);
                if (val instanceof Number n) c.setCellValue(n.doubleValue());
                else if (val instanceof Boolean b) c.setCellValue(b);
                else if (val != null) c.setCellValue(val.toString());
            }
        }
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        wb.write(bos);
        wb.close();
        return new ByteArrayInputStream(bos.toByteArray());
    }

    // ---------------------------------------------------------------
    // ✅ 1. Full SUCCESS flow
    // ---------------------------------------------------------------
    @Test
    void uploadExcelFile_success() throws Exception {
        // Arrange
        BulkUploadFormColumn formCol = new BulkUploadFormColumn();
        formCol.setExcelColumnName("id");
        formCol.setColumnName("id");
        formCol.setIsRequired(true);
        formCol.setCastTo("int");

        lookUpTable.setBulkUploadForm("[form]");
        when(lookUpTableRepository.findByTableName("demo_table"))
                .thenReturn(Optional.of(lookUpTable));
        when(objectMapper.readValue(eq("[\"groupA\"]"), any(TypeReference.class)))
                .thenReturn(List.of("groupA"));
        when(objectMapper.readValue(eq("[form]"), any(TypeReference.class)))
                .thenReturn(List.of(formCol));
        when(file.getInputStream()).thenReturn(
                makeExcel(Map.of("id", "header"), List.of(Map.of("id", 123)))
        );
        when(ruleAppTableVersionRepository
                .findFirstByTableIdAndValidityEndIsNullOrderByValidityStartDesc(anyString()))
                .thenReturn(Optional.empty());

        // Act
        Map<String, Object> result =
                service.uploadExcelFile("demo_table", List.of("groupA"), file, "tester");

        // Assert
        assertEquals("Excel file processed successfully", result.get("message"));
        assertEquals(1, result.get("totalRows"));
        verify(dynamicTableService).truncateAndReloadTable(anyString(), anyList(), anyList());
        verify(ruleappHistoricalDataRepository).save(any());
    }

    // ---------------------------------------------------------------
    // ✅ 2. Table not found
    // ---------------------------------------------------------------
    @Test
    void uploadExcelFile_tableNotFound_throws() {
        when(lookUpTableRepository.findByTableName("unknown"))
                .thenReturn(Optional.empty());

        assertThrows(RuleAppServiceException.class,
                () -> service.uploadExcelFile("unknown", List.of("groupA"), file, "tester"));
    }

    // ---------------------------------------------------------------
    // ✅ 3. Unauthorized group
    // ---------------------------------------------------------------
    @Test
    void uploadExcelFile_unauthorizedGroup_throws() throws Exception {
        when(lookUpTableRepository.findByTableName("demo_table"))
                .thenReturn(Optional.of(lookUpTable));
        when(objectMapper.readValue(anyString(), any(TypeReference.class)))
                .thenReturn(List.of("someOtherGroup"));

        assertThrows(RuleAppServiceException.class,
                () -> service.uploadExcelFile("demo_table", List.of("badGroup"), file, "tester"));
    }

    // ---------------------------------------------------------------
    // ✅ 4. Bulk upload form blank / parse error / empty
    // ---------------------------------------------------------------
    @Test
    void uploadExcelFile_bulkFormBlank_throws() {
        lookUpTable.setBulkUploadForm("");
        when(lookUpTableRepository.findByTableName("demo_table"))
                .thenReturn(Optional.of(lookUpTable));
        when(objectMapper.readValue(eq("[\"groupA\"]"), any(TypeReference.class)))
                .thenReturn(List.of("groupA"));

        assertThrows(RuleAppServiceException.class,
                () -> service.uploadExcelFile("demo_table", List.of("groupA"), file, "tester"));
    }

    @Test
    void uploadExcelFile_bulkFormParseError_throws() throws Exception {
        lookUpTable.setBulkUploadForm("[form]");
        when(lookUpTableRepository.findByTableName("demo_table"))
                .thenReturn(Optional.of(lookUpTable));
        when(objectMapper.readValue(eq("[\"groupA\"]"), any(TypeReference.class)))
                .thenReturn(List.of("groupA"));
        when(objectMapper.readValue(eq("[form]"), any(TypeReference.class)))
                .thenThrow(new RuntimeException("json parse"));

        assertThrows(RuleAppServiceException.class,
                () -> service.uploadExcelFile("demo_table", List.of("groupA"), file, "tester"));
    }

    // ---------------------------------------------------------------
    // ✅ 5. Missing required Excel column
    // ---------------------------------------------------------------
    @Test
    void uploadExcelFile_missingColumn_throws() throws Exception {
        BulkUploadFormColumn col = new BulkUploadFormColumn();
        col.setExcelColumnName("id");
        col.setColumnName("id");
        col.setIsRequired(true);
        lookUpTable.setBulkUploadForm("[form]");
        when(lookUpTableRepository.findByTableName("demo_table"))
                .thenReturn(Optional.of(lookUpTable));
        when(objectMapper.readValue(eq("[\"groupA\"]"), any(TypeReference.class)))
                .thenReturn(List.of("groupA"));
        when(objectMapper.readValue(eq("[form]"), any(TypeReference.class)))
                .thenReturn(List.of(col));
        when(file.getInputStream()).thenReturn(
                makeExcel(Map.of("wrongHeader", "header"), List.of(Map.of("wrongHeader", 1)))
        );

        assertThrows(RuleAppServiceException.class,
                () -> service.uploadExcelFile("demo_table", List.of("groupA"), file, "tester"));
    }

    // ---------------------------------------------------------------
    // ✅ 6. Duplicate key detection
    // ---------------------------------------------------------------
    @Test
    void uploadExcelFile_duplicateKey_throws() throws Exception {
        BulkUploadFormColumn col = new BulkUploadFormColumn();
        col.setExcelColumnName("id");
        col.setColumnName("id");
        col.setIsRequired(true);
        col.setCastTo("int");
        lookUpTable.setBulkUploadForm("[form]");
        when(lookUpTableRepository.findByTableName("demo_table"))
                .thenReturn(Optional.of(lookUpTable));
        when(objectMapper.readValue(eq("[\"groupA\"]"), any(TypeReference.class)))
                .thenReturn(List.of("groupA"));
        when(objectMapper.readValue(eq("[form]"), any(TypeReference.class)))
                .thenReturn(List.of(col));

        List<Map<String, Object>> rows = List.of(Map.of("id", 1), Map.of("id", 1));
        when(file.getInputStream()).thenReturn(makeExcel(Map.of("id", "header"), rows));

        assertThrows(RuleAppServiceException.class,
                () -> service.uploadExcelFile("demo_table", List.of("groupA"), file, "tester"));
    }

    // ---------------------------------------------------------------
    // ✅ 7. Regex validation failure path
    // ---------------------------------------------------------------
    @Test
    void uploadExcelFile_regexValidationFailure_throws() throws Exception {
        BulkUploadFormColumn col = new BulkUploadFormColumn();
        col.setExcelColumnName("name");
        col.setColumnName("name");
        col.setIsRequired(true);
        col.setCastTo("string");
        col.setRegexPattern("\\d+"); // expect digits only

        lookUpTable.setKeyColumns("name");
        lookUpTable.setBulkUploadForm("[form]");
        when(lookUpTableRepository.findByTableName("demo_table"))
                .thenReturn(Optional.of(lookUpTable));
        when(objectMapper.readValue(eq("[\"groupA\"]"), any(TypeReference.class)))
                .thenReturn(List.of("groupA"));
        when(objectMapper.readValue(eq("[form]"), any(TypeReference.class)))
                .thenReturn(List.of(col));

        when(file.getInputStream()).thenReturn(
                makeExcel(Map.of("name", "header"), List.of(Map.of("name", "abc")))
        );

        assertThrows(RuleAppServiceException.class,
                () -> service.uploadExcelFile("demo_table", List.of("groupA"), file, "tester"));
    }

    // ---------------------------------------------------------------
    // ✅ 8. Historical data save error branch
    // ---------------------------------------------------------------
    @Test
    void uploadExcelFile_historicalSaveFails_throws() throws Exception {
        BulkUploadFormColumn col = new BulkUploadFormColumn();
        col.setExcelColumnName("id");
        col.setColumnName("id");
        col.setIsRequired(true);
        col.setCastTo("int");
        lookUpTable.setBulkUploadForm("[form]");

        when(lookUpTableRepository.findByTableName("demo_table"))
                .thenReturn(Optional.of(lookUpTable));
        when(objectMapper.readValue(eq("[\"groupA\"]"), any(TypeReference.class)))
                .thenReturn(List.of("groupA"));
        when(objectMapper.readValue(eq("[form]"), any(TypeReference.class)))
                .thenReturn(List.of(col));
        when(file.getInputStream()).thenReturn(
                makeExcel(Map.of("id", "header"), List.of(Map.of("id", 123)))
        );
        when(ruleAppTableVersionRepository
                .findFirstByTableIdAndValidityEndIsNullOrderByValidityStartDesc(anyString()))
                .thenReturn(Optional.empty());
        doThrow(new RuntimeException("fail"))
                .when(ruleappHistoricalDataRepository).save(any());

        assertThrows(RuleAppServiceException.class,
                () -> service.uploadExcelFile("demo_table", List.of("groupA"), file, "tester"));
    }
}
