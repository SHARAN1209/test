package com.bhge.inspire.spir.service.impl;

import com.bhge.inspire.opa.pojo.response.LookUpTableResponse;
import com.bhge.inspire.opa.pojo.response.RuleAppTableVersionResponse;
import com.bhge.inspire.opa.util.OPADataManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class RuleTableAccessServiceImplTest {

    @InjectMocks
    private RuleTableAccessServiceImpl ruleTableAccessService;

    @Mock
    private OPADataManager opaDataManager;

    @Mock
    private MultipartFile file;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllowedTablesByGroups() {
        // Arrange
        List<String> groups = Arrays.asList("group1", "group2");
        List<LookUpTableResponse> mockResponse = Arrays.asList(new LookUpTableResponse());
        when(opaDataManager.getLookUpTablesByGroups(groups)).thenReturn(mockResponse);

        // Act
        List<LookUpTableResponse> result = ruleTableAccessService.getAllowedTablesByGroups(groups);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        verify(opaDataManager, times(1)).getLookUpTablesByGroups(groups);
    }

    @Test
    void testGetTableVersions() {
        // Arrange
        String tableId = "table1";
        boolean isAdmin = true;
        List<String> groups = Arrays.asList("group1");
        List<RuleAppTableVersionResponse> mockResponse = Arrays.asList(new RuleAppTableVersionResponse());
        when(opaDataManager.getTableVersions(tableId, isAdmin)).thenReturn(mockResponse);

        // Act
        List<RuleAppTableVersionResponse> result = ruleTableAccessService.getTableVersions(tableId, isAdmin, groups);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        verify(opaDataManager, times(1)).getTableVersions(tableId, isAdmin);
    }

    @Test
    void testGetTableItems() {
        // Arrange
        String tableId = "table123";
        String version = "v1";
        List<String> groups = Arrays.asList("groupA");
        List<Map<String, Object>> mockResponse = Arrays.asList(Map.of("key", "value"));
        when(opaDataManager.getTableItems(tableId, version, groups)).thenReturn(mockResponse);

        // Act
        List<Map<String, Object>> result = ruleTableAccessService.getTableItems(tableId, version, groups);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("value", result.get(0).get("key"));
        verify(opaDataManager, times(1)).getTableItems(tableId, version, groups);
    }

    @Test
    void testUploadExcelFile() {
        // Arrange
        String tableId = "table123";
        List<String> groups = Arrays.asList("groupA", "groupB");
        String currentUser = "testUser";
        Map<String, Object> mockResponse = Map.of("status", "success");
        when(opaDataManager.uploadExcelFile(tableId, groups, file, currentUser)).thenReturn(mockResponse);

        // Act
        Map<String, Object> result = ruleTableAccessService.uploadExcelFile(tableId, groups, file, currentUser);

        // Assert
        assertNotNull(result);
        assertEquals("success", result.get("status"));
        verify(opaDataManager, times(1)).uploadExcelFile(tableId, groups, file, currentUser);
    }
}
