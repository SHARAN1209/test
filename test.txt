private Map<String, Object> processRow(Row row, List<BulkUploadFormColumn> form,
        Map<String, Integer> columnIndexMap, List<ValidationError> errors, int rowIndex) {

    Map<String, Object> rowData = new HashMap<>();

    for (BulkUploadFormColumn col : form) {
        Integer columnIndex = columnIndexMap.get(col.getExcelColumnName());
        if (columnIndex == null) continue;

        String cellValue = getCellValueAsString(row.getCell(columnIndex));

        // **NEW LOGIC: Handle required vs optional fields**
        if (col.isRequired() && (cellValue == null || cellValue.isBlank())) {
            throw new RuleAppServiceException(ErrorCode.MISSING_REQUIRED_COLUMN_VALUE,
                    String.format("Missing required value in row %d, column %d (%s)",
                            rowIndex + 1, columnIndex + 1, col.getExcelColumnName()),
                    null, null, HttpStatus.BAD_REQUEST);
        }

        // If optional and value is blank, just skip it
        if (!col.isRequired() && (cellValue == null || cellValue.isBlank())) {
            rowData.put(col.getColumnName(), null);
            continue;
        }

        // Regex validation (only if value is present)
        if (col.getRegexPattern() != null && !cellValue.isEmpty()
                && !Pattern.matches(col.getRegexPattern(), cellValue)) {
            errors.add(new ValidationError(rowIndex + 1, columnIndex + 1, col.getExcelColumnName(),
                    cellValue, "Value does not match regex pattern"));
        }

        // Type casting
        rowData.put(col.getColumnName(), castValue(cellValue, col.getCastTo()));
    }
    return rowData;
}
